{"/about":{"title":"TruecallerJS","data":{"":"Welcome to TruecallerJS! This is a library for retrieving phone number details using the Truecaller API. It provides a simple and convenient way to access information about phone numbers in your JavaScript and TypeScript projects.","description#Description":"TruecallerJS is built to simplify the process of fetching phone number details. With this library, you can easily integrate Truecaller functionality into your Node.js, JavaScript, and TypeScript applications. It abstracts the complexities of interacting with the Truecaller API and provides a streamlined interface for fetching and processing phone number information.","features#Features":"Phone Number Lookup: Retrieve detailed information about a phone number, including the owner's name, location, and more.\nSupport for Node.js, JavaScript, and TypeScript: TruecallerJS can be used in Node.js projects, as well as in JavaScript and TypeScript applications.\nSimple and Lightweight: TruecallerJS is designed to be easy to use and lightweight."}},"/cli-usage/1-installation":{"title":"Installation","data":{"":"","prerequisites#Prerequisites":"Before you begin the installation process, please ensure that you have the following prerequisites in place:\nNode.js: Make sure you have Node.js installed on your system. You can download it from the official Node.js website: https://nodejs.org\nPhone number: Valid phone number","global-installation-steps#Global Installation Steps":"Follow these steps to globally install truecallerjs using npm:","step-1-open-your-terminal#Step 1: Open Your Terminal":"Open your terminal or command prompt. You'll be using this terminal to execute npm commands.","step-2-global-installation#Step 2: Global Installation":"Run the following command to globally install the truecallerjs package:\nnpm install -g truecallerjs\nThe -g flag tells npm to install the package globally on your system.","step-3-verify-installation#Step 3: Verify Installation":"Once the installation is complete, you can verify that truecallerjs has been installed by running:\ntruecallerjs --version\nThis command should display the version of the installed truecallerjs package.","step-4-usage#Step 4: Usage":"With truecallerjs successfully installed, you can now use the truecallerjs command in your terminal to interact with the Truecaller API. Run truecallerjs --help to see the available commands and usage information."}},"/cli-usage/2-login":{"title":"2 Login","data":{"":"","login#Login":"Here are some examples of the available options:\ntruecallerjs login: Use this command to log in to your Truecaller account.\n\n\nsumith@hppavilion ~ % truecallerjs login\nLogin\n\nEnter mobile number in International Format\nExample : +919912345678.\n\n? Enter your phone number : +919912857144\n\nEnter the 6-digit OTP you have received on your mobile number.\n\n\n? Enter your phone number : +919912857144\nSending OTP to +919912857144.\nOTP sent successfully.\n? Enter Received OTP: 142514\n\nYou have successfully logged in truecallerjs. You can now use the truecallerjs command-line tool from any directory on your system to interact with the Truecaller API."}},"/cli-usage/3-searching":{"title":"Searching","data":{"":"truecallerjs -s [number]: Use this command to search for a phone number and retrieve the caller name and related information.","searching-a-number#Searching a number":"~$ truecallerjs -s [number]\n\ndata                :\nid                  : jsiebejebbeebhee/dnss00w==\nname                : Sumith Emmadi\nimId                : 1g7rm006b356o\ngender              : UNKNOWN\nimage               : https://storage.googleapis.com/tc-images-noneu/myview/1/jdvdidbdhvdjdvddbkdbeiebeieb\nscore               : 0.9\naccess              : PUBLIC\nenhanced            : true\nphones              :\ne164Format          : +000000000000\nnumberType          : MOBILE\nnationalFormat      : +000000000000\ndialingCode         : 91\ncountryCode         : IN\ncarrier             : Airtel\ntype                : openPhone\naddresses           :\ncity                : Andhra Pradesh\ncountryCode         : IN\ntimeZone            : +05:30\ntype                : address\ninternetAddresses   :\nid                  : email@gmail.com\nservice             : email\ncaption             : Sumith Emmadi\ntype                : internetAddress\nbadges              : verified, user\ncacheTtl            :\nsources             : []\nsearchWarnings      : []\nsurveys             : []\nprovider            : ss-nu\nstats               :\nsourceStats         : []\n\nTo print only name.\n~$ truecallerjs -s [number] --name\n\nName : Sumith Emmadi\nAternate name : sumithemmadi  ## print's alternate name if exist\nOther command's\n~$ truecallerjs -s [number] -r --name\n\nSumith Emmadi","output-formats#Output Formats":"1 . JSON\n2 . XML\n3 . YAML\n4 . TEXT\n\n\n~$ truecallerjs -s [number] --xml\n\nOutput without colouring\n\n\n~$ truecallerjs -s [number] --nc","to-get-only-json-output#To get only JSON output":"~$ truecallerjs -s [number] --json\n\n~$ truecallerjs -s [number] --json\n\nPrints data without color\n\n\n~$ truecallerjs -s [number] --json --nc","to-get-xml-output#To get XML output":"~$ truecallerjs -s [number] --xml\n\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\" ?>\n<root>\n<data>\n<id>jsiebejebbeebhee/dnss00w==</id>\n<name>Sumith Emmadi</name>\n<imId>1g7rm006b356o</imId>\n<gender>UNKNOWN</gender>\n<image>https://storage.googleapis.com/tc-images-noneu/myview/1/jdvdidbdhvdjdvddbkdbeiebeieb</image>\n<score>0.9</score>\n<access>PUBLIC</access>\n<enhanced>true</enhanced>\n<phones>\n<e164Format>+000000000000</e164Format>\n<numberType>MOBILE</numberType>\n<nationalFormat>+000000000000</nationalFormat>\n<dialingCode>91</dialingCode>\n<countryCode>IN</countryCode>\n<carrier>Airtel</carrier>\n<type>openPhone</type>\n</phones>\n<addresses>\n<city>Andhra Pradesh</city>\n<countryCode>IN</countryCode>\n<timeZone>+05:30</timeZone>\n<type>address</type>\n</addresses>\n<internetAddresses>\n<id>email@gmail.com</id>\n<service>email</service>\n<caption>Sumith Emmadi</caption>\n<type>internetAddress</type>\n</internetAddresses>\n<badges>verified</badges>\n<badges>user</badges>\n<cacheTtl>\n</cacheTtl>\n<sources/>\n<searchWarnings/>\n<surveys/>\n</data>\n<provider>ss-nu</provider>\n<stats>\n<sourceStats/>\n</stats>\n</root>","to-get-yaml-output#To get YAML output":"~$ truecallerjs -s [number] --yaml\n\ndata:\n-\nid: \"jsiebejebbeebhee/dnss00w==\"\nname: \"Sumith Emmadi\"\nimId: 1g7rm006b356o\ngender: UNKNOWN\nimage: \"https://storage.googleapis.com/tc-images-noneu/myview/1/jdvdidbdhvdjdvddbkdbeiebeieb\"\nscore: 0.9\naccess: PUBLIC\nenhanced: true\nphones:\n-\ne164Format: \"+000000000000\"\nnumberType: MOBILE\nnationalFormat: \"+000000000000\"\ndialingCode: 91\ncountryCode: IN\ncarrier: \"Airtel\"\ntype: openPhone\naddresses:\n-\ncity: \"Andhra Pradesh\"\ncountryCode: IN\ntimeZone: \"+05:30\"\ntype: address\ninternetAddresses:\n-\nid: \"email@gmail.com\"\nservice: email\ncaption: \"Sumith Emmadi\"\ntype: internetAddress\nbadges:\n-\nverified\n-\nuser\ntags:\nnameFeedback:\nnameSource: 1\nnameElectionAlgo: \"\"\ncacheTtl: \"\"\nsources:\nsearchWarnings:\nsurveys:\nprovider: \"ss-nu\"\nstats:\nsourceStats:","to-get-output-as-a-plain-text#To get output as a plain text":"~$ truecallerjs -s [number] --text\n\ndata                :\nid                  : jsiebejebbeebhee/dnss00w==\nname                : Sumith Emmadi\nimId                : 1g7rm006b356o\ngender              : UNKNOWN\nimage               : https://storage.googleapis.com/tc-images-noneu/myview/1/jdvdidbdhvdjdvddbkdbeiebeieb\nscore               : 0.9\naccess              : PUBLIC\nenhanced            : true\nphones              :\ne164Format          : +000000000000\nnumberType          : MOBILE\nnationalFormat      : +000000000000\ndialingCode         : 91\ncountryCode         : IN\ncarrier             : Airtel\ntype                : openPhone\naddresses           :\ncity                : Andhra Pradesh\ncountryCode         : IN\ntimeZone            : +05:30\ntype                : address\ninternetAddresses   :\nid                  : email@gmail.com\nservice             : email\ncaption             : Sumith Emmadi\ntype                : internetAddress\nbadges              : verified, user\ncacheTtl            :\nsources             : []\nsearchWarnings      : []\nsurveys             : []\nprovider            : ss-nu\nstats               :\nsourceStats         : []"}},"/cli-usage/4-bulk-search":{"title":"Bulk Search","data":{"":"truecallerjs --bulksearch, --bs: Use this command to perform a bulk number search.","to-make-a-bulk-number-search#To make a bulk number search":"~$ truecallerjs --bs [Numbers seperated by comma]\nExample :\n~$ truecallerjs --bs 9912345678,+14051234567,+919987654321\n\nraw output\n\n\n~$ truecallerjs --bs 9912345678,+14051234567,+919987654321 -r\n\nno color\n\n\n~$ truecallerjs --bs 9912345678,+14051234567,+919987654321 --nc"}},"/":{"title":"Introduction","data":{"":"Welcome to TruecallerJS! This is a library for retrieving phone number details using the Truecaller API. It provides a simple and convenient way to access information about phone numbers in your  JavaScript and TypeScript projects.","what-is-truecallerjs-#What is TruecallerJS ?":"TruecallerJS is built to simplify the process of fetching phone number details. With this library, you can easily integrate Truecaller functionality into your Node.js, JavaScript, and TypeScript applications. It abstracts the complexities of interacting with the Truecaller API and provides a streamlined interface for fetching and processing phone number information.","features#Features":"Phone Number Lookup: Retrieve detailed information about a phone number, including the owner's name, location, and more.\nSupport for Node.js, JavaScript, and TypeScript: TruecallerJS can be used in Node.js projects, as well as in JavaScript and TypeScript applications.\nSimple and Lightweight: TruecallerJS is designed to be easy to use and lightweight."}},"/sponsor":{"title":"💝 Sponsor","data":{"":"If you find TruecallerJS helpful or inspiring, consider supporting me through GitHub Sponsors. Your sponsorship helps me dedicate more time and effort to open source development and creating impactful projects.\nSponsor Me: https://github.com/sponsors/sumithemmadi\nPaypal: paypal.me/sumithemmadi\nUPI ID : sumithemmadi@paytm","-sponsors#💖 Sponsors":""}},"/usage/1-login":{"title":"1 Login","data":{"":"","login#Login":"","installation#Installation":"To install the truecallerjs package, run the following command:\n\n\nnpm install truecallerjs","login-1#Login":"The login function is used to log in to the Truecaller service. It takes a phone number in international format as a parameter and returns a JSON object containing the login request details.Method Signature\ntruecallerjs.login(phonenumber)\n\nphonenumber (String): The phone number in international format.","return-value#Return Value":"The function returns a Promise that resolves to a JSON object with the following properties:\nstatus (Number): The status code of the login request. Possible values are 1 (OTP sent successfully) or 9 (request in pending).\nmessage (String): A message indicating the status of the login request.\ndomain (String): The domain associated with the phone number.\nparsedPhoneNumber (Number): The phone number without the country code.\nparsedCountryCode (String): The country code associated with the phone number.\nrequestId (String): The unique identifier for the login request.\nmethod (String): The method used for sending the OTP (e.g., \"sms\").\ntokenTtl (Number): The time-to-live (TTL) value for the OTP token in seconds.","example#Example":"import truecallerjs, { LoginResponse } from \"truecallerjs\";\n\nasync function performLogin(): Promise<void> {\ntry {\nconst phoneNumber: string = \"+919912345678\";\nconst json_data: LoginResponse = await truecallerjs.login(phoneNumber);\n\n// Example response:\n// {\n//     \"status\": 1,\n//     \"message\": \"Sent\",\n//     \"domain\": \"noneu\",\n//     \"parsedPhoneNumber\": 919912345678,\n//     \"parsedCountryCode\": \"IN\",\n//     \"requestId\": \"6fe0eba6-acds-24dc-66de-15b3fba349c3\",\n//     \"method\": \"sms\",\n//     \"tokenTtl\": 300\n// }\n\nif (json_data.status === 1 || json_data.status === 9) {\n// OTP sent successfully\n// Handle the response accordingly\nconsole.log(\"OTP sent successfully\");\nconsole.log(\"Request ID:\", json_data.requestId);\nconsole.log(\"Token TTL:\", json_data.tokenTtl);\n} else if (json_data.status === 6 || json_data.status === 5) {\n// Verification attempts exceeded\n// Handle the response accordingly\nconsole.log(\"Verification attempts exceeded\");\nconsole.log(\"Status:\", json_data.status);\nconsole.log(\"Message:\", json_data.message);\n} else {\n// Unknown response\n// Handle the response accordingly\nconsole.log(\"Unknown response\");\nconsole.log(\"Status:\", json_data.status);\nconsole.log(\"Message:\", json_data.message);\n}\n} catch (error) {\nconsole.error(\"Error occurred:\", error);\n}\n}\n\nperformLogin();\n\nNote : Make sure to replace +919912345678 with the actual phone number you want to use.\n\nstatus\tmessage\t1\tOTP sent successfully\t9\tRequest in pending\t6 or 5\tVerification Attempts Exceeded\n\nSave this json in a file or store in a variable. This json will be used to verify OTP in verifyOtp() function.","otp-verification#OTP Verification":"The verifyOtp function is used to verify the mobile number with the OTP (One-Time Password) received.\n\n\nimport truecallerjs, { LoginResponse } from \"truecallerjs\";\n\nasync function performOtpVerification(): Promise<void> {\ntry {\nconst phoneNumber: string = \"+919912345678\";\nconst json_data: LoginResponse = await truecallerjs.login(phoneNumber);\n\n// Example response from login:\n// {\n//    \"status\": 1,\n//    \"message\": \"Sent\",\n//    \"domain\": \"noneu\",\n//    \"parsedPhoneNumber\": 919912345678,\n//    \"parsedCountryCode\": \"IN\",\n//    \"requestId\": \"6fe0eba6-acds-24dc-66de-15b3fba349c3\",\n//    \"method\": \"sms\",\n//    \"tokenTtl\": 300\n// }\n\nconst otp: string = \"123456\"; // Replace with the actual OTP\n\nconst res: object = await truecallerjs.verifyOtp(\nphoneNumber,\njson_data,\notp\n);\n\nconsole.log(res);\n\n// Example response from OTP verification:\n// {\n//    \"status\": 2,\n//    \"message\": \"Verified\",\n//    \"installationId\": \"a1k07--Vgdfyvv_rftf5uuudhuhnkljyvvtfftjuhbuijbhug\",\n//    \"ttl\": 259200,\n//    \"userId\": 1234567890123456789,\n//    \"suspended\": false,\n//    \"phones\": [\n//       {\n//          \"phoneNumber\": 919912345678,\n//          \"countryCode\": \"IN\",\n//          \"priority\": 1\n//       }\n//    ]\n// }\n\nif (res.status === 2 && !res.suspended) {\n// LOGIN SUCCESSFUL\nconsole.log(\"Login successful\");\nconsole.log(\"Installation ID:\", res.installationId);\nconsole.log(\"User ID:\", res.userId);\n} else if (res.status === 11) {\n// INVALID OTP\nconsole.log(\"Invalid OTP\");\nconsole.log(\"Status:\", res.status);\nconsole.log(\"Message:\", res.message);\n} else if (res.status === 7) {\n// RETRIES LIMIT EXCEEDED\nconsole.log(\"Retries limit exceeded\");\nconsole.log(\"Status:\", res.status);\nconsole.log(\"Message:\", res.message);\n} else if (res.suspended) {\n// ACCOUNT SUSPENDED\nconsole.log(\"Account suspended\");\nconsole.log(\"Status:\", res.status);\nconsole.log(\"Message:\", res.message);\n} else {\n// UNKNOWN RESPONSE\nconsole.log(\"Unknown response\");\nconsole.log(\"Message:\", res.message);\n}\n} catch (error) {\nconsole.error(\"Error occurred:\", error);\n}\n}\n\nperformOtpVerification();\n\nstatus\tmessage\t2\tLogin Successful\t11\tInvalid OTP\t7\tOTP Retries exceeded\nMake sure to replace phonenumber with the actual phone number, json_data with the JSON response obtained from the login function, and otp with the actual OTP received.The res variable will contain the JSON response from the OTP verification request. You can access the properties of the response to handle different scenarios:\nIf res.status is 2 and res.suspended is false, it means the login was successful.\nres.installationId, res.suspended, res.phones[0].phoneNumber, and res.phones[0].countryCode properties for further processing.\nIf res.status is 11, it means the OTP entered is invalid.\nIf res.status is 7, it means the number of OTP verification retries has exceeded the limit.\nIf res.suspended is true, it means the account is suspended.\nFor any other response, you can check res.status and res.message for more information."}},"/usage/2-searching":{"title":"Searching","data":{"":"Normal search for a phone number.\n\n\nimport truecallerjs, { SearchData, Format } from \"truecallerjs\";\n\nasync function performTruecallerSearch(): Promise<void> {\nconst searchData: SearchData = {\nnumber: \"9912345678\",\ncountryCode: \"IN\",\ninstallationId: \"a1k07--Vgdfyvv_rftf5uuudhuhnkljyvvtfftjuhbuijbhug\",\n};\n\ntry {\nconst response: Format = await truecallerjs.search(searchData);\nconsole.log(response.json());\n\n// Additional response methods:\n// console.log(response.xml());\n// console.log(response.yaml());\n// console.log(response.text());\n\n// Example of available data from the response:\nconsole.log(response.getName()); // \"Sumith Emmadi\"\nconsole.log(response.getAlternateName()); // \"sumith\"\nconsole.log(response.getAddresses()); // {....}\nconsole.log(response.getEmailId()); // example@domain.com\nconsole.log(response.getCountryDetails()); // {...}\n} catch (error) {\nconsole.error(\"Error occurred:\", error);\n}\n}\n\nperformTruecallerSearch();\n\nnumber : Phone number\ncountryCode : Country code to use by default If any phone number is not in e164 format(Internation format). Eg: Country code for India is \"IN\".\ninstallationId : InstallationId Here, you need to login first to use it. Use the truecallerjs login command to login to your account.\n\n\nIn the above example, the truecallerjs package is used to search for a phone number. The search_data object contains the necessary parameters, including the number, country code, and installation ID. The response from the truecallerjs.search() function provides various methods to access the returned data.\nNote : Make sure to log in using the truecallerjs login command and obtain your installation ID using the truecallerjs -i command.","response-object#response Object":"The response object represents the response obtained from a query. It provides various methods and properties to access and manipulate the response data.","methods#Methods":"response.json(color)\nParameters:\ncolor (Boolean): Indicates whether to add color formatting to the JSON output.\n\n\nReturns: JSON response as a string.\nDescription: This method returns the JSON response as a string. The optional color parameter determines whether to include color formatting in the output.\n\n\nresponse.xml(color)\nParameters:\ncolor (Boolean): Indicates whether to add color formatting to the XML output.\n\n\nReturns: XML output as a string.\nDescription: This method returns the XML output as a string. The optional color parameter determines whether to include color formatting in the output.\n\n\nresponse.yaml(color)\nParameters:\ncolor (Boolean): Indicates whether to add color formatting to the YAML output.\n\n\nReturns: YAML output as a string.\nDescription: This method returns the YAML output as a string. The optional color parameter determines whether to include color formatting in the output.\n\n\nresponse.text(color, space)\nParameters:\ncolor (Boolean): Indicates whether to add color formatting to the JSON output.\nspace (Boolean): Indicates whether to include spacing between keys and values in the JSON output.\n\n\nReturns: JSON response as a string.\nDescription: This method returns the JSON response as a string. The optional color parameter determines whether to include color formatting in the output, and the space parameter determines whether to include spacing between keys and values.","properties#Properties":"response.getName()\nReturns: The name associated with the response.\nDescription: This method retrieves the name associated with the response.\n\n\nresponse.getAlternateName()\nReturns: The alternate name associated with the response.\nDescription: This method retrieves the alternate name associated with the response.\n\n\nresponse.getAddresses()\nReturns: The addresses associated with the response.\nDescription: This method retrieves the addresses associated with the response. The details of the addresses can be accessed using the returned object.\n\n\nresponse.getEmailId()\nReturns: The email ID associated with the response.\nDescription: This method retrieves the email ID associated with the response.\n\n\nresponse.getCountryDetails()\nReturns: The country details associated with the response.\nDescription: This method retrieves the country details associated with the response. The details can be accessed using the returned object."}},"/usage/3-bulk-search":{"title":"Bulk Search","data":{"":"The truecallerjs package also supports bulk search on multiple phone numbers:\nimport truecallerjs, { BulkSearchData, Format } from \"truecallerjs\";\n\nasync function performBulkTruecallerSearch(): Promise<void> {\nconst countryCode: string = \"IN\";\nconst installationId: string = \"a1k07--Vgdfyvv_rftf5uuudhuhnkljyvvtfftjuhbuijbhug\";\nconst phoneNumbers: string = \"+9912345678,+14051234567,+919987654321\";\n\ntry {\nconst response: BulkSearchData = await truecallerjs.bulkSearch(phoneNumbers, countryCode, installationId);\nconsole.log(response);\n} catch (error) {\nconsole.error(\"Error occurred:\", error);\n}\n}\n\nperformBulkTruecallerSearch();\nIn this example, the truecallerjs.bulkSearch() function is used to perform bulk searches on multiple phone numbers. The phoneNumbers parameter should contain the phone numbers separated by commas. The countryCode and installationId parameters are used to specify the default country code and installation ID, respectively.\nNote : Make sure to log in using the truecallerjs login command and obtain your installation ID using the truecallerjs -i command."}}}